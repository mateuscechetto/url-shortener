package com.zg.UrlShortener.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.zg.UrlShortener.model.Url;

import repository.UrlRepository;

@Component
public class UrlShortnerService {
	
	private int currentID;
	final char[] charSet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789".toCharArray();

	
	@Autowired
	private UrlRepository urlRepository;

	public Url generateShortUrl(String originalUrl) {
		
		String shortUrl = encodeUrl(currentID);
		Url urlToPersist = new Url(currentID, originalUrl, shortUrl);
		Url persistedUrl = persistShortUrl(urlToPersist);
		currentID++;
		return persistedUrl;
	}
	
	
	public Url persistShortUrl(Url url) {
			Url newUrl = new Url(currentID, url.getOriginalUrl(), url.getShortUrl());
			return persistShortUrl(newUrl);
	}
		

	
	public Url getOriginalUrl(String url) {
		return urlRepository.findByShortUrl(url);
		
	}
	
	private String encodeUrl(int counter) {
		StringBuilder shortUrl = new StringBuilder();
		while(counter > 0) {
			shortUrl.append(this.charSet[counter % 62]);
			counter = counter / 62;
		}
		return shortUrl.toString();
	}
	
	private int decodeUrl(String shortUrl) {
		int decode = 0;
		for(int i = 0; i < shortUrl.length(); i++) {
			decode = decode * 62 + base62(shortUrl.charAt(i));
		}
		return decode;	
	}
	
	private int base62(char c) {
        if (c >= '0' && c <= '9') return c - '0';
        else if (c >= 'a' && c <= 'z') return c - 'a' + 10;
        else if (c >= 'A' && c <= 'Z') return c - 'A' + 36;
        else return 0;
    }
	
}
